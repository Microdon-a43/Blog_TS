import User from '../models/userModel.js';
import Role from '../models/roleModel.js';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { validationResult } from 'express-validator';

const generateAccessToken = (id, roles) => {
  const payload = {
    id,
    roles,
  };

  return jwt.sign(payload, process.env.ACCESS_TOKEN_SECRET, {
    expiresIn: '1h',
  });
};

export const userController = {
  register: async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json(errors.array());
      }

      const { username, password } = req.body;
      const user = await User.findOne({ username });
      if (user)
        return res.json({
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',
        });
      if (password.length < 4)
        return res.json({
          message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∏–∑ 4 —Å–∏–º–≤–æ–ª–æ–≤',
        });
      const hashedPassword = await bcrypt.hash(password, 8);
      const userRole = await Role.findOne({ value: 'USER' });
      const newUser = await User.create({
        ...req.body,
        password: hashedPassword,
        roles: [userRole.value],
      });

      !newUser
        ? res.json({ message: '–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' })
        : res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', newUser });
    } catch (error) {
      console.log(error);
      res.status(400).json({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      });
    }
  },
  login: async (req, res) => {
    try {
      const { username, password } = req.body;
      const user = await User.findOne({ username });
      if (!user)
        return res
          .status(401)
          .json({ message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });

      const passwordCheck = await bcrypt.compare(password, user.password);
      if (!passwordCheck)
        return res
          .status(401)
          .json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });

      const accessToken = generateAccessToken(user._id, user.roles);

      const refreshToken = jwt.sign(
        { id: user._id, password: user.password },
        process.env.REFRESH_TOKEN_SECRET,
        {
          expiresIn: '60d',
        }
      );

      res.cookie('refreshToken', refreshToken, {
        maxAge: 30 * 24 * 60 * 60 * 1000,
        httpOnly: true,
      });

      return res.json({
        message: '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å üòä üëå',
        user,
        accessToken,
      });
    } catch (error) {
      console.log(error);
      res.status(400).json({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      });
    }
  },
  getAuthUser: async (req, res) => {
    try {
      const myToken = req.cookies.refreshToken;
      if (!myToken)
        return res.status(401).json({
          message: '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!',
        });

      jwt.verify(
        myToken,
        process.env.REFRESH_TOKEN_SECRET,
        async (err, result) => {
          if (err)
            return res.status(401).json({
              message: '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!',
            });

          const user = await User.findById({ _id: result.id });
          if (!user)
            return res.status(401).json({
              message: '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',
            });

          const accessToken = generateAccessToken(user._id, user.roles);

          return res.json({ user, accessToken });
        }
      );
    } catch (error) {
      console.log(error);
    }
  },
  getAllUsers: async (req, res) => {
    try {
      const users = await User.find();
      res.json(users);
    } catch (error) {
      console.log(error);
    }
  },
};
